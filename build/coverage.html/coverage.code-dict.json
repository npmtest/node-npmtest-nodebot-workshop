{"/home/travis/build/npmtest/node-npmtest-nodebot-workshop/test.js":"/* istanbul instrument in package npmtest_nodebot_workshop */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nodebot-workshop/lib.npmtest_nodebot_workshop.js":"/* istanbul instrument in package npmtest_nodebot_workshop */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nodebot_workshop = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nodebot_workshop = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nodebot-workshop/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nodebot-workshop && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nodebot_workshop */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nodebot_workshop\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nodebot_workshop.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_nodebot_workshop.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nodebot_workshop.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_nodebot_workshop.__dirname +\n                    '/lib.npmtest_nodebot_workshop.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nodebot-workshop/node_modules/nodebot-workshop/nodebot-workshop.js":"#!/usr/bin/env node\n\nconst workshop = require('workshopper-adventure')({\n    appDir    : __dirname\n  , languages : ['en', 'ja', 'fr']\n  , menu      : {fg: 'black', bg: /^win/.test(process.platform) ? 'yellow' : 220}\n  , header    : require('workshopper-adventure/default/header')\n  , footer    : require('workshopper-adventure/default/footer')\n})\n\nworkshop.addAll(require('./exercises/menu.json'))\n\nworkshop.execute(process.argv.slice(2))\n","/home/travis/build/npmtest/node-npmtest-nodebot-workshop/node_modules/nodebot-workshop/gulpfile.js":"var jshint = require('gulp-jshint')\nvar shell   = require('gulp-shell')\nvar gulp   = require('gulp')\n\nvar paths = {\n  solutions:'./exercises/*/solution/solution.js',\n  exercises:'./exercises/*/exercise.js',\n  scripts: './exercises/**/*.js'\n}\n\ngulp.task('lint', function() {\n  return gulp.src(paths.scripts)\n    .pipe(jshint())\n    .pipe(jshint.reporter('jshint-stylish'))\n})\n\n// WHY U NO FAIL ON ERRORS!?\ngulp.task('verify-solutions', function() {\n  return gulp.src(paths.solutions, {read: false})\n    .pipe(\n      shell(\n        ['node verify-solutions.js <%= file.path %>'],\n        {cwd: __dirname + '/tests'}))\n\n    .on('error', function (err) {\n      console.error(err)\n      process.exit(-1)\n    })\n})\n\ngulp.task('default', ['lint', 'verify-solutions'], function() {\n  // place code for your default task here\n})\n","/home/travis/build/npmtest/node-npmtest-nodebot-workshop/node_modules/nodebot-workshop/lib/broadcaster.js":"var dgram = require('dgram')\n\nmodule.exports = function (exercise, passed, callback) {\n  var sock = dgram.createSocket('udp4')\n    , packet = new Buffer(JSON.stringify({\n      workshop: exercise.workshopper.title,\n      exercise: exercise.name,\n      event: passed ? 'pass' : 'fail',\n      timestamp: Date.now()\n    }))\n    , port = process.env.PROGRESS_BROADCAST_PORT || 1138\n\n  try {\n    sock.bind(port, '0.0.0.0', function (er) {\n      if (er) return;\n      sock.setBroadcast(true)\n\n      sock.send(packet, 0, packet.length, port, '255.255.255.255', function () {\n        sock.close()\n      })\n    })\n  } catch (error) {}\n\n  callback()\n}\n","/home/travis/build/npmtest/node-npmtest-nodebot-workshop/node_modules/nodebot-workshop/lib/notifier.js":"var notifier = {\n  notify: function () {}\n}\n\ntry {\n  notifier = require('node-notifier')\n} catch (e) {\n\n}\n\nmodule.exports = function (excercise, passed, callback) {\n  try {\n    notifier.notify({\n        title: excercise.__('title'),\n        message: excercise.name + (passed ? ' passed :)' : ' failed :('),\n        appIcon: __dirname + '/../assets/nodebots.png',\n        contentImage: __dirname + '/../assets/' + (passed ? 'happy' : 'sad') + '_robot' + ~~(Math.random() * 5) + '.jpg'\n    })\n  } catch(e) {\n\n  }\n\n  // needs enough time to show the notification\n  setTimeout(callback, 1000)\n}\n","/home/travis/build/npmtest/node-npmtest-nodebot-workshop/node_modules/nodebot-workshop/lib/verify-processor.js":"var afterTest = require('./after-test')\n\nvar TestError = function (message) {\n  Error.call(this, message)\n}\n\nTestError.prototype = Error.prototype\n\nmodule.exports = function (exercise, verify) {\n  var assert = function (message, context, fn) {\n    if (fn()) {\n      exercise.emit('pass', exercise.__('pass.' + message, context))\n    } else {\n      exercise.emit('fail', exercise.__('fail.' + message, context))\n\n      throw new TestError('Failed!')\n    }\n  }\n\n  var test = {\n    equals: function (left, right, message, context) {\n      assert(message, context, function () {\n        return left === right\n      })\n    },\n    truthy: function (left, message, context) {\n      assert(message, context, function () {\n        return !!left\n      })\n    },\n    falsey: function (left, message, context) {\n      assert(message, context, function () {\n        return !left\n      })\n    },\n    isA: function (left, right, message, context) {\n      assert(message, context, function () {\n        return left instanceof right\n      })\n    },\n    closeTo: function (left, right, factor, message, context) {\n      assert(message, context, function () {\n        return Math.abs(left - right) <= factor\n      })\n    },\n    greaterThan: function (left, right, message, context) {\n      assert(message, context, function () {\n        return left > right\n      })\n    },\n    lessThan: function (left, right, message, context) {\n      assert(message, context, function () {\n        return left < right\n      })\n    }\n  }\n\n  var resolve = function (error, callback) {\n    if (error) {\n      if (error instanceof TestError) {\n        // assertion failure\n        afterTest(exercise, false, callback)\n      } else {\n        // other failure\n        console.error(error.stack ? error.stack : error.toString())\n        callback(error)\n      }\n    } else {\n      afterTest(exercise, true, callback)\n    }\n  }\n\n  return function (callback) {\n    try {\n      verify(test, function (error) {\n        resolve(error, callback)\n      })\n    } catch (error) {\n      resolve(error, callback)\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-nodebot-workshop/node_modules/nodebot-workshop/lib/after-test.js":"var async = require('async')\nvar notifier = require('./notifier')\nvar broadcaster = require('./broadcaster')\n\nmodule.exports = function (exercise, passed, callback) {\n  async.parallel([\n    broadcaster.bind(null, exercise, passed),\n    notifier.bind(null, exercise, passed)\n  ], function (error) {\n    callback(error, passed)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-nodebot-workshop/node_modules/nodebot-workshop/stubs/five.js":"var inherits = require(\"util\").inherits;\nvar proxyquire = require(\"proxyquire\");\nvar sinon = require(\"sinon\");\n\nvar stubs = {\n  firmata: require(\"./io-stub\"),\n  serialport: require(\"./serialport-stub\")\n};\n\nstubs[\"serialport\"][\"@global\"] = true;\nstubs[\"firmata\"][\"@global\"] = true;\n\nvar five = proxyquire(\"johnny-five\", stubs);\n\n// Add stubs to five for inspection later\nfive.stubs = stubs;\n\nfunction createSpy (Constructor) {\n  // Wrap methods with spies and store instances\n  function SpyConstructor (opts) {\n    if (!(this instanceof SpyConstructor)) {\n      return new SpyConstructor(opts);\n    }\n\n    Constructor.call(this, opts);\n\n    // Spy on Constructor functions\n    for (var key in this) {\n      if (this[key] instanceof Function) {\n        this[key] = sinon.spy(this[key]);\n      }\n    }\n\n    SpyConstructor.instances.push(this);\n  }\n  inherits(SpyConstructor, Constructor);\n\n  // Copy keys from constructor onto the spy\n  Object.keys(Constructor).forEach(function (key) {\n    SpyConstructor[key] = Constructor[key];\n  });\n\n  SpyConstructor.instances = [];\n\n  return sinon.spy(SpyConstructor);\n}\n\n// Create a new constructor which wraps spies around it's methods when created\nfive.spyOn = function (/* \"Board\", \"Led\" ...etc. */) {\n  var args = Array.prototype.slice.call(arguments)\n\n  args.forEach(function (name) {\n    this[name] = createSpy(this[name])\n  }, this)\n\n  return this;\n}\n\nmodule.exports = five;\n","/home/travis/build/npmtest/node-npmtest-nodebot-workshop/node_modules/nodebot-workshop/stubs/io-stub.js":"var sinon = require('sinon'),\n  util = require('util'),\n  IOBoard = require('ioboard');\n\n// an IO plugin for Johnny-Five that looks like an Arduino UNO\n// https://github.com/rwaldron/johnny-five/wiki/IO-Plugins\nvar IO = function(path, callback) {\n  IOBoard.call(this, {quiet: true});\n\n  // pretend we've connected to firmata\n  setTimeout(function() {\n    this.emit('connected');\n\n    // would now query the board's capabilities\n    setTimeout(function() {\n\n      // set digital pin capabilities\n      for(var i = 0; i < 20; i++) {\n        var supportedModes = [];\n        var mode = this.MODES.OUTPUT;\n        var analogChannel = 127;\n\n        // set analog pin capabilities\n        if(i < 13) {\n          // standard modes supported by digital pins\n          if(i > 1) {\n            supportedModes.push(this.MODES.OUTPUT);\n            supportedModes.push(this.MODES.INPUT);\n            supportedModes.push(this.MODES.SERVO);\n          }\n\n          // these pins also support pwm mode\n          if([3, 5, 6, 9, 10, 11].indexOf(i) != -1) {\n            supportedModes.push(this.MODES.PWM);\n          }\n        } else {\n          // pins > 13 are analog\n          mode = this.MODES.ANALOG;\n          analogChannel = i - 14;\n          supportedModes = [this.MODES.OUTPUT, this.MODES.INPUT, this.MODES.ANALOG];\n        }\n\n        // populate pins array\n        this._pins.push({\n          supportedModes: supportedModes,\n          mode: mode,\n          value : 0,\n          report: 0,\n          analogChannel: analogChannel\n        });\n      }\n\n      this.emit('ready');\n\n      callback();\n    }.bind(this), 200);\n  }.bind(this), 200);\n}\nutil.inherits(IO, IOBoard);\n\nmodule.exports = {\n  Board: function(port, callback) {\n    if(module.exports.singleton) {\n      throw new Error('Board already created');\n    }\n\n    var singleton = new IO(port, callback);\n\n    // spy on every IO method\n    for(var key in singleton) {\n      if(singleton[key] instanceof Function) {\n        singleton[key] = sinon.spy(singleton[key]);\n      }\n    }\n\n    // we're going to interrogate the singleton during solution verification\n    module.exports.singleton = singleton;\n\n    return singleton;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-nodebot-workshop/node_modules/nodebot-workshop/stubs/serialport-stub.js":"var sinon = require('sinon');\n\nvar SerialPort = function() {\n\n}\n\nSerialPort.list = sinon.stub()\nSerialPort.list.callsArgWithAsync(0, null, [{\n  // has to match the regex /usb|acm|^com/i\n  comName: '/dev/cu.usbserial-FAKEID'\n}])\n\nmodule.exports = sinon.spy(SerialPort)\n"}